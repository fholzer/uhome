C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\home\alex\tools\SimplicityStudio_v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/alex/S
                    -implicityStudio/v4_workspace/EFM8SB10F8G-A-QFN20/src/InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(
                    -2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/alex/SimplicityStudio/v4_wo
                    -rkspace/EFM8SB10F8G-A-QFN20/inc;/home/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9//Device/shared/si8051Bas
                    -e;/home/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9//Device/shared/si8051base;/home/alex/tools/SimplicityS
                    -tudio_v4/developer/sdks/8051/v4.0.9//Device/EFM8SB1/inc;/home/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9/
                    -/Device/EFM8SB1/peripheral_driver/inc) PRINT(.\src/InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitD
                    -evice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              PCA_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PBCFG_0_enter_DefaultMode_from_RESET();
  30   1              VDDMON_0_enter_DefaultMode_from_RESET();
  31   1              RTC_0_enter_DefaultMode_from_RESET();
  32   1              CLOCK_0_enter_DefaultMode_from_RESET();
  33   1              TIMER01_0_enter_DefaultMode_from_RESET();
  34   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  35   1              SMBUS_0_enter_DefaultMode_from_RESET();
  36   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  37   1              PMU_0_enter_DefaultMode_from_RESET();
  38   1              // Restore the SFRPAGE
  39   1              SFRPAGE = SFRPAGE_save;
  40   1              // [Config Calls]$
  41   1      
  42   1      }
  43          
  44          //================================================================================
  45          // PORTS_1_enter_DefaultMode_from_RESET
  46          //================================================================================
  47          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  48   1              // $[P1 - Port 1 Pin Latch]
  49   1              // [P1 - Port 1 Pin Latch]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 2   

  50   1      
  51   1              // $[P1MDOUT - Port 1 Output Mode]
  52   1              // [P1MDOUT - Port 1 Output Mode]$
  53   1      
  54   1              // $[P1MDIN - Port 1 Input Mode]
  55   1              /***********************************************************************
  56   1               - P1.0 pin is configured for digital mode
  57   1               - P1.1 pin is configured for analog mode
  58   1               - P1.2 pin is configured for analog mode
  59   1               - P1.3 pin is configured for analog mode
  60   1               - P1.5 pin is configured for analog mode
  61   1               - P1.6 pin is configured for analog mode
  62   1               - P1.7 pin is configured for analog mode
  63   1               ***********************************************************************/
  64   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__ANALOG | P1MDIN_B2__ANALOG
  65   1                              | P1MDIN_B3__ANALOG | P1MDIN_B5__ANALOG | P1MDIN_B6__ANALOG
  66   1                              | P1MDIN_B7__ANALOG;
  67   1              // [P1MDIN - Port 1 Input Mode]$
  68   1      
  69   1              // $[P1SKIP - Port 1 Skip]
  70   1              /***********************************************************************
  71   1               - P1.0 pin is not skipped by the crossbar
  72   1               - P1.1 pin is skipped by the crossbar
  73   1               - P1.2 pin is skipped by the crossbar
  74   1               - P1.3 pin is skipped by the crossbar
  75   1               - P1.5 pin is skipped by the crossbar
  76   1               - P1.6 pin is skipped by the crossbar
  77   1               - P1.7 pin is skipped by the crossbar
  78   1               ***********************************************************************/
  79   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
  80   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B5__SKIPPED | P1SKIP_B6__SKIPPED
  81   1                              | P1SKIP_B7__SKIPPED;
  82   1              // [P1SKIP - Port 1 Skip]$
  83   1      
  84   1              // $[Missing Pin Skip]
  85   1              // Skip any pins that are not available on this package
  86   1              P1SKIP |= P1SKIP_B4__SKIPPED;
  87   1              // [Missing Pin Skip]$
  88   1      
  89   1              // $[P1MASK - Port 1 Mask]
  90   1              // [P1MASK - Port 1 Mask]$
  91   1      
  92   1              // $[P1MAT - Port 1 Match]
  93   1              // [P1MAT - Port 1 Match]$
  94   1      
  95   1              // $[P1DRV - Port 1 Drive Strength]
  96   1              // [P1DRV - Port 1 Drive Strength]$
  97   1      
  98   1      }
  99          
 100          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 101   1              // $[XBR2 - Port I/O Crossbar 2]
 102   1              /***********************************************************************
 103   1               - Weak Pullups enabled 
 104   1               - Crossbar enabled
 105   1               ***********************************************************************/
 106   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 107   1              // [XBR2 - Port I/O Crossbar 2]$
 108   1      
 109   1              // $[XBR0 - Port I/O Crossbar 0]
 110   1              /***********************************************************************
 111   1               - UART I/O unavailable at Port pin
 112   1               - SPI I/O unavailable at Port pins
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 3   

 113   1               - SMBus 0 I/O routed to Port pins
 114   1               - CP0 unavailable at Port pin
 115   1               - Asynchronous CP0 unavailable at Port pin
 116   1               - SYSCLK unavailable at Port pin
 117   1               ***********************************************************************/
 118   1              XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 119   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED
 120   1                              | XBR0_SYSCKE__DISABLED;
 121   1              // [XBR0 - Port I/O Crossbar 0]$
 122   1      
 123   1              // $[XBR1 - Port I/O Crossbar 1]
 124   1              // [XBR1 - Port I/O Crossbar 1]$
 125   1      
 126   1      }
 127          
 128          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 129   1              // $[P0 - Port 0 Pin Latch]
 130   1              // [P0 - Port 0 Pin Latch]$
 131   1      
 132   1              // $[P0MDOUT - Port 0 Output Mode]
 133   1              // [P0MDOUT - Port 0 Output Mode]$
 134   1      
 135   1              // $[P0MDIN - Port 0 Input Mode]
 136   1              /***********************************************************************
 137   1               - P0.0 pin is configured for digital mode
 138   1               - P0.1 pin is configured for digital mode
 139   1               - P0.2 pin is configured for analog mode
 140   1               - P0.3 pin is configured for analog mode
 141   1               - P0.4 pin is configured for analog mode
 142   1               - P0.5 pin is configured for analog mode
 143   1               - P0.6 pin is configured for analog mode
 144   1               - P0.7 pin is configured for analog mode
 145   1               ***********************************************************************/
 146   1              P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__DIGITAL | P0MDIN_B2__ANALOG
 147   1                              | P0MDIN_B3__ANALOG | P0MDIN_B4__ANALOG | P0MDIN_B5__ANALOG
 148   1                              | P0MDIN_B6__ANALOG | P0MDIN_B7__ANALOG;
 149   1              // [P0MDIN - Port 0 Input Mode]$
 150   1      
 151   1              // $[P0SKIP - Port 0 Skip]
 152   1              /***********************************************************************
 153   1               - P0.0 pin is not skipped by the crossbar
 154   1               - P0.1 pin is not skipped by the crossbar
 155   1               - P0.2 pin is skipped by the crossbar
 156   1               - P0.3 pin is skipped by the crossbar
 157   1               - P0.4 pin is skipped by the crossbar
 158   1               - P0.5 pin is skipped by the crossbar
 159   1               - P0.6 pin is skipped by the crossbar
 160   1               - P0.7 pin is skipped by the crossbar
 161   1               ***********************************************************************/
 162   1              P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__NOT_SKIPPED
 163   1                              | P0SKIP_B2__SKIPPED | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED
 164   1                              | P0SKIP_B5__SKIPPED | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
 165   1              // [P0SKIP - Port 0 Skip]$
 166   1      
 167   1              // $[P0MASK - Port 0 Mask]
 168   1              // [P0MASK - Port 0 Mask]$
 169   1      
 170   1              // $[P0MAT - Port 0 Match]
 171   1              // [P0MAT - Port 0 Match]$
 172   1      
 173   1              // $[P0DRV - Port 0 Drive Strength]
 174   1              // [P0DRV - Port 0 Drive Strength]$
 175   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 4   

 176   1      }
 177          
 178          extern void HFOSC_0_enter_DefaultMode_from_RESET(void) {
 179   1              // $[HFO#CAL - High Frequency Oscillator Calibration]
 180   1              // [HFO#CAL - High Frequency Oscillator Calibration]$
 181   1      
 182   1              // $[HFO#CN - High Frequency Oscillator Control]
 183   1              /***********************************************************************
 184   1               - High Frequency Oscillator enabled
 185   1               ***********************************************************************/
 186   1              HFO0CN |= HFO0CN_IOSCEN__ENABLED;
 187   1              // [HFO#CN - High Frequency Oscillator Control]$
 188   1      
 189   1              // $[Oscillator Ready]
 190   1              while ((HFO0CN & HFO0CN_IFRDY__BMASK) == HFO0CN_IFRDY__NOT_SET)
 191   1                      ;
 192   1              // [Oscillator Ready]$
 193   1      
 194   1      }
 195          
 196          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 197   1              // $[CLKSEL - Clock Select]
 198   1              /***********************************************************************
 199   1               - SYSCLK is equal to selected clock source divided by 1
 200   1               - Clock derived from the Internal Low Power Oscillator
 201   1               ***********************************************************************/
 202   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__LPOSC;
 203   1              // Wait for the clock to be ready
 204   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 205   1                      ;
 206   1              // [CLKSEL - Clock Select]$
 207   1      
 208   1      }
 209          
 210          extern void VREG_0_enter_DefaultMode_from_RESET(void) {
 211   1              // $[REG0CN - Voltage Regulator Control]
 212   1              /***********************************************************************
 213   1               - Enable the precision High Frequency Oscillator bias
 214   1               ***********************************************************************/
 215   1              REG0CN = REG0CN_OSCBIAS__DISABLED;
 216   1              // [REG0CN - Voltage Regulator Control]$
 217   1      
 218   1      }
 219          
 220          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 221   1              // $[PCA0MD - PCA Mode]
 222   1              /***********************************************************************
 223   1               - Disable Watchdog Timer
 224   1               - System clock divided by 12
 225   1               - PCA continues to function normally while the system controller is in
 226   1               Idle Mode
 227   1               - Disable the CF interrupt
 228   1               - Disable Watchdog Timer
 229   1               - Watchdog Timer Enable unlocked
 230   1               ***********************************************************************/
 231   1              SFRPAGE = 0x00;
 232   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
 233   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL
 234   1                              | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_WDTE__DISABLED
 235   1                              | PCA0MD_WDLCK__UNLOCKED;
 236   1              // [PCA0MD - PCA Mode]$
 237   1      
 238   1              // $[PCA0H - PCA Counter/Timer High Byte]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 5   

 239   1              // [PCA0H - PCA Counter/Timer High Byte]$
 240   1      
 241   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 242   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 243   1      
 244   1              // $[PCA0PWM - PCA PWM Configuration]
 245   1              // [PCA0PWM - PCA PWM Configuration]$
 246   1      
 247   1              // $[PCA0CN0 - PCA Control 0]
 248   1              // [PCA0CN0 - PCA Control 0]$
 249   1      
 250   1      }
 251          
 252          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 253   1      
 254   1              // $[CKCON0 - Clock Control 0]
 255   1              /***********************************************************************
 256   1               - System clock divided by 4
 257   1               - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 258   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 259   1               - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 260   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 261   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 262   1               - Timer 1 uses the system clock
 263   1               ***********************************************************************/
 264   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE
 265   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 266   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 267   1                              | CKCON0_T1M__SYSCLK;
 268   1              // [CKCON0 - Clock Control 0]$
 269   1      
 270   1              // $[TMOD - Timer 0/1 Mode]
 271   1              /***********************************************************************
 272   1               - Mode 0, 13-bit Counter/Timer
 273   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
 274   1               - Timer Mode
 275   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 276   1               - Timer Mode
 277   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 278   1               ***********************************************************************/
 279   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 280   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 281   1              // [TMOD - Timer 0/1 Mode]$
 282   1      
 283   1              // $[TCON - Timer 0/1 Control]
 284   1              /***********************************************************************
 285   1               - Start Timer 1 running
 286   1               ***********************************************************************/
 287   1              TCON |= TCON_TR1__RUN;
 288   1              // [TCON - Timer 0/1 Control]$
 289   1      
 290   1      }
 291          
 292          extern void SMBUS_0_enter_DefaultMode_from_RESET(void) {
 293   1      
 294   1              // $[SMB0ADR - SMBus 0 Slave Address]
 295   1              // [SMB0ADR - SMBus 0 Slave Address]$
 296   1      
 297   1              // $[SMB0ADM - SMBus 0 Slave Address Mask]
 298   1              // [SMB0ADM - SMBus 0 Slave Address Mask]$
 299   1      
 300   1              // $[SMB0CF - SMBus 0 Configuration]
 301   1              /***********************************************************************
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 6   

 302   1               - Timer 1 Overflow
 303   1               - Slave states are inhibited
 304   1               - Enable the SMBus module
 305   1               ***********************************************************************/
 306   1              SMB0CF &= ~SMB0CF_SMBCS__FMASK;
 307   1              SMB0CF |= SMB0CF_SMBCS__TIMER1 | SMB0CF_INH__SLAVE_DISABLED
 308   1                              | SMB0CF_ENSMB__ENABLED;
 309   1              // [SMB0CF - SMBus 0 Configuration]$
 310   1      
 311   1      }
 312          
 313          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 314   1              // $[Timer Initialization]
 315   1              //Save Timer Configuration
 316   1              uint8_t TCON_save;
 317   1              TCON_save = TCON;
 318   1              //Stop Timers
 319   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 320   1      
 321   1              // [Timer Initialization]$
 322   1      
 323   1              // $[TH0 - Timer 0 High Byte]
 324   1              // [TH0 - Timer 0 High Byte]$
 325   1      
 326   1              // $[TL0 - Timer 0 Low Byte]
 327   1              // [TL0 - Timer 0 Low Byte]$
 328   1      
 329   1              // $[TH1 - Timer 1 High Byte]
 330   1              // [TH1 - Timer 1 High Byte]$
 331   1      
 332   1              // $[TL1 - Timer 1 Low Byte]
 333   1              /***********************************************************************
 334   1               - Timer 1 Low Byte = 0x34
 335   1               ***********************************************************************/
 336   1              TL1 = (0x34 << TL1_TL1__SHIFT);
 337   1              // [TL1 - Timer 1 Low Byte]$
 338   1      
 339   1              // $[Timer Restoration]
 340   1              //Restore Timer Configuration
 341   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 342   1      
 343   1              // [Timer Restoration]$
 344   1      
 345   1      }
 346          
 347          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 348   1              // $[EIE1 - Extended Interrupt Enable 1]
 349   1              /***********************************************************************
 350   1               - Disable ADC0 Conversion Complete interrupt
 351   1               - Disable ADC0 Window Comparison interrupt
 352   1               - Disable CP0 interrupts
 353   1               - Disable all PCA0 interrupts
 354   1               - Disable RTC Alarm interrupts
 355   1               - Enable interrupt requests generated by SMB0
 356   1               - Disable Timer 3 interrupts
 357   1               ***********************************************************************/
 358   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 359   1                              | EIE1_EPCA0__DISABLED | EIE1_ERTC0A__DISABLED | EIE1_ESMB0__ENABLED
 360   1                              | EIE1_ET3__DISABLED;
 361   1              // [EIE1 - Extended Interrupt Enable 1]$
 362   1      
 363   1              // $[EIP1 - Extended Interrupt Priority 1]
 364   1              // [EIP1 - Extended Interrupt Priority 1]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 7   

 365   1      
 366   1              // $[IE - Interrupt Enable]
 367   1              /***********************************************************************
 368   1               - Enable each interrupt according to its individual mask setting
 369   1               - Disable external interrupt 0
 370   1               - Disable external interrupt 1
 371   1               - Disable all SPI0 interrupts
 372   1               - Disable all Timer 0 interrupt
 373   1               - Disable all Timer 1 interrupt
 374   1               - Disable Timer 2 interrupt
 375   1               - Disable UART0 interrupt
 376   1               ***********************************************************************/
 377   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 378   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 379   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 380   1              // [IE - Interrupt Enable]$
 381   1      
 382   1              // $[IP - Interrupt Priority]
 383   1              // [IP - Interrupt Priority]$
 384   1      
 385   1              // $[EIE2 - Extended Interrupt Enable 2]
 386   1              // [EIE2 - Extended Interrupt Enable 2]$
 387   1      
 388   1              // $[EIP2 - Extended Interrupt Priority 2]
 389   1              // [EIP2 - Extended Interrupt Priority 2]$
 390   1      
 391   1      }
 392          
 393          extern void RTC_0_enter_DefaultMode_from_RESET(void) {
 394   1              // $[RTC Initialization]
 395   1              // [RTC Initialization]$
 396   1      
 397   1              // $[RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]
 398   1              // [RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]$
 399   1      
 400   1              // $[RTC0XCN - RTC Oscillator Control]
 401   1              /***********************************************************************
 402   1               - Self-Oscillate Mode selected
 403   1               - Disable AGC
 404   1               - Disable the Bias Double feature
 405   1               - LFOSC0 enabled and selected as RTC oscillator source
 406   1               ***********************************************************************/
 407   1              RTC0ADR = RTC0XCN0;
 408   1              RTC0DAT = RTC0XCN0_XMODE__SELF_OSCILLATE | RTC0XCN0_AGCEN__DISABLED
 409   1                              | RTC0XCN0_BIASX2__DISABLED | RTC0XCN0_LFOEN__ENABLED;
 410   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 411   1                      ;    //Poll Busy Bit
 412   1              // [RTC0XCN - RTC Oscillator Control]$
 413   1      
 414   1              // $[RTC0XCF - RTC Oscillator Configuration]
 415   1              // [RTC0XCF - RTC Oscillator Configuration]$
 416   1      
 417   1              // $[CAPTURE0 - RTC Timer Capture 0]
 418   1              // [CAPTURE0 - RTC Timer Capture 0]$
 419   1      
 420   1              // $[CAPTURE1 - RTC Timer Capture 1]
 421   1              // [CAPTURE1 - RTC Timer Capture 1]$
 422   1      
 423   1              // $[CAPTURE2 - RTC Timer Capture 2]
 424   1              // [CAPTURE2 - RTC Timer Capture 2]$
 425   1      
 426   1              // $[CAPTURE3 - RTC Timer Capture 3]
 427   1              // [CAPTURE3 - RTC Timer Capture 3]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 8   

 428   1      
 429   1              // $[ALARM0 - RTC Alarm Programmed Value 0]
 430   1              // [ALARM0 - RTC Alarm Programmed Value 0]$
 431   1      
 432   1              // $[ALARM1 - RTC Alarm Programmed Value 1]
 433   1              // [ALARM1 - RTC Alarm Programmed Value 1]$
 434   1      
 435   1              // $[ALARM2 - RTC Alarm Programmed Value 2]
 436   1              /***********************************************************************
 437   1               - RTC Alarm Programmed Value 2 = 0x05
 438   1               ***********************************************************************/
 439   1              RTC0ADR = ALARM2;
 440   1              RTC0DAT = (0x05 << ALARM2_ALARM2__SHIFT);
 441   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 442   1                      ;    //Poll Busy Bit
 443   1              // [ALARM2 - RTC Alarm Programmed Value 2]$
 444   1      
 445   1              // $[ALARM3 - RTC Alarm Programmed Value 3]
 446   1              // [ALARM3 - RTC Alarm Programmed Value 3]$
 447   1      
 448   1              // $[RTC0CN - RTC Control]
 449   1              /***********************************************************************
 450   1               - Enable RTC oscillator
 451   1               - RTC timer is running
 452   1               - Enable missing RTC detector
 453   1               - Enable RTC alarm
 454   1               - Alarm event flag is set or enable the auto reset function
 455   1               - Do not start a capture operation
 456   1               - Do not start a set operation
 457   1               ***********************************************************************/
 458   1              RTC0ADR = RTC0CN0;
 459   1              RTC0DAT = RTC0CN0_RTC0EN__ENABLED | RTC0CN0_RTC0TR__RUN
 460   1                              | RTC0CN0_MCLKEN__ENABLED | RTC0CN0_RTC0AEN__ENABLED
 461   1                              | RTC0CN0_ALRM__SET | RTC0CN0_RTC0CAP__NOT_SET
 462   1                              | RTC0CN0_RTC0SET__NOT_SET;
 463   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 464   1                      ;    //Poll Busy Bit
 465   1      
 466   1              // [RTC0CN - RTC Control]$
 467   1      
 468   1              // $[External Oscillator Setup]
 469   1              // [External Oscillator Setup]$
 470   1      
 471   1      }
 472          
 473          extern void PMU_0_enter_DefaultMode_from_RESET(void) {
 474   1              // $[Clock Setup]
 475   1      
 476   1              // We must switch to the LPOSC before going into sleep mode
 477   1              // Save the clock settings
 478   1              uint8_t CLKSEL_save;
 479   1              uint8_t HFO0CN_save;
 480   1              CLKSEL_save = CLKSEL;
 481   1              HFO0CN_save = HFO0CN;
 482   1      
 483   1              // Switch to the LPOSC divided by 1
 484   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__LPOSC;
 485   1              while (!((CLKSEL & CLKSEL_CLKRDY__BMASK) == CLKSEL_CLKRDY__SET))
 486   1                      ;
 487   1              HFO0CN &= ~HFO0CN_IOSCEN__BMASK;
 488   1      
 489   1              // [Clock Setup]$
 490   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 9   

 491   1              // $[PMU0MD - Power Management Unit Mode]
 492   1              // [PMU0MD - Power Management Unit Mode]$
 493   1      
 494   1              // $[PMU0FL - Power Management Unit Flag]
 495   1              /***********************************************************************
 496   1               - A Capacitive Sensing event did not cause the last wake-up
 497   1               ***********************************************************************/
 498   1              PMU0FL = PMU0FL_CS0WK__NOT_SET;
 499   1              // [PMU0FL - Power Management Unit Flag]$
 500   1      
 501   1              // $[PCON0 - Power Control 0]
 502   1              // [PCON0 - Power Control 0]$
 503   1      
 504   1              // $[Clear PMU Wake-up flags]
 505   1              // [Clear PMU Wake-up flags]$
 506   1      
 507   1              // $[PMU0CF - Power Management Unit Configuration]
 508   1              /***********************************************************************
 509   1               - Sleep mode not activated
 510   1               - Suspend mode not activated
 511   1               - Clear all wake-up flags
 512   1               - Comparator 0 rising edge did not cause the last wake-up
 513   1               - A Port Match event did not cause the last wake-up
 514   1               - A RTC Alarm caused the last wake-up
 515   1               - An RTC oscillator fail event caused the last wake-up
 516   1               ***********************************************************************/
 517   1              PMU0CF = PMU0CF_SLEEP__NORMAL | PMU0CF_SUSPEND__NORMAL
 518   1                              | PMU0CF_CLEAR__ALL_FLAGS | PMU0CF_CPT0WK__NOT_SET
 519   1                              | PMU0CF_PMATWK__NOT_SET | PMU0CF_RTCAWK__SET | PMU0CF_RTCFWK__SET;
 520   1              NOP();
 521   1              NOP(); // Delay to update wake-up flags
 522   1              // [PMU0CF - Power Management Unit Configuration]$
 523   1      
 524   1              // $[Clock Restore]
 525   1      
 526   1              // Restore clock settings
 527   1              HFO0CN |= (HFO0CN_save & HFO0CN_IOSCEN__BMASK);
 528   1              CLKSEL = CLKSEL_save;
 529   1              while (!((CLKSEL & CLKSEL_CLKRDY__BMASK) == CLKSEL_CLKRDY__SET))
 530   1                      ;
 531   1      
 532   1              // [Clock Restore]$
 533   1      
 534   1      }
 535          
 536          extern void enter_Sleep_from_DefaultMode(void) {
 537   1      
 538   1      }
 539          
 540          extern void PORTS_1_enter_Sleep_from_DefaultMode(void) {
 541   1      
 542   1      }
 543          
 544          extern void enter_DefaultMode_from_Sleep(void) {
 545   1      
 546   1      }
 547          
 548          extern void PORTS_1_enter_DefaultMode_from_Sleep(void) {
 549   1      
 550   1      }
 551          
 552          extern void VDDMON_0_enter_DefaultMode_from_RESET(void) {
 553   1              // $[VDM0CN - VDD Supply Monitor Control]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/09/2018 23:37:23 PAGE 10  

 554   1              /***********************************************************************
 555   1               - Disable the VDD Early Warning interrupt
 556   1               - Disable the VDD supply monitor
 557   1               ***********************************************************************/
 558   1              VDM0CN &= ~(VDM0CN_VDDOKIE__BMASK | VDM0CN_VDMEN__BMASK);
 559   1              // [VDM0CN - VDD Supply Monitor Control]$
 560   1      
 561   1      }
 562          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    227    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
