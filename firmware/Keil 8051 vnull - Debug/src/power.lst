C51 COMPILER V9.53.0.0   POWER                                                             01/14/2018 17:53:23 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN .\src/power.OBJ
COMPILER INVOKED BY: Z:\home\alex\tools\SimplicityStudio_v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/alex/S
                    -implicityStudio/v4_workspace/EFM8SB10F8G-A-QFN20/src/power.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FL
                    -OATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/alex/SimplicityStudio/v4_workspa
                    -ce/EFM8SB10F8G-A-QFN20/inc;/home/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9//Device/shared/si8051Base;/ho
                    -me/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9//Device/shared/si8051base;/home/alex/tools/SimplicityStudio
                    -_v4/developer/sdks/8051/v4.0.9//Device/EFM8SB1/inc;/home/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9//Devi
                    -ce/EFM8SB1/peripheral_driver/inc) PRINT(.\src/power.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/power.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // power.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // Driver for the power management function.
  10          //
  11          // Target:         EFM8SB1
  12          // Tool chain:     Generic
  13          // Command Line:   None
  14          //
  15          // Release 1.0 (BL)
  16          //    - Initial Release
  17          //    - 9 JAN 2015
  18          //
  19          // Release 1.0
  20          //    - Initial Revision (FB)
  21          //    - 19 MAY 2010
  22          //
  23          
  24          //-----------------------------------------------------------------------------
  25          // Includes
  26          //-----------------------------------------------------------------------------
  27          #include "SI_EFM8SB1_Register_Enums.h"
  28          #include "smartclock.h"                // RTC Functionality
  29          #include "power.h"                     // Power Management Functionality
  30          
  31          //-----------------------------------------------------------------------------
  32          // Global Variables
  33          //-----------------------------------------------------------------------------
  34          
  35          // Variables used for the RTC interface
  36          uint8_t PMU0CF_Local;                       // Holds the desired Wake-up sources
  37           
  38          // Define Wake-Up Flags
  39          uint8_t RTC_Alarm;
  40          uint8_t RTC_Failure;
  41          uint8_t Comparator_Wakeup;
  42          uint8_t Port_Match_Wakeup;
  43          
  44          //-----------------------------------------------------------------------------
  45          // Function PROTOTYPES
  46          //-----------------------------------------------------------------------------
  47          void LPM(uint8_t mode);
  48          void LPM_Init(void);
  49          void LPM_Enable_Wakeup (uint8_t wakeup);
  50          void LPM_Disable_Wakeup (uint8_t wakeup);
C51 COMPILER V9.53.0.0   POWER                                                             01/14/2018 17:53:23 PAGE 2   

  51          
  52          //-----------------------------------------------------------------------------
  53          // LPM_Init ()
  54          //-----------------------------------------------------------------------------
  55          //
  56          // Return Value : None
  57          // Parameters   : None
  58          //
  59          // This function will initialize the low power functionality
  60          //
  61          //-----------------------------------------------------------------------------
  62          void LPM_Init (void)
  63          {
  64   1        PMU0CF = CLEAR;
  65   1        PMU0CF_Local = 0;
  66   1        RTC_Alarm = 0;
  67   1        RTC_Failure = 0;
  68   1        Comparator_Wakeup = 0;
  69   1        Port_Match_Wakeup = 0;
  70   1        P2MDOUT |= 0x01;
  71   1      }
  72          
  73          //-----------------------------------------------------------------------------
  74          // LPM_Enable_Wakeup ()
  75          //-----------------------------------------------------------------------------
  76          //
  77          // Return Value : None
  78          // Parameters   : None
  79          //
  80          // This function will enable wakeup sources
  81          //
  82          //-----------------------------------------------------------------------------
  83          void LPM_Enable_Wakeup (uint8_t wakeup)
  84          {
  85   1        PMU0CF_Local |= (wakeup & (RTC | PORT_MATCH | COMPARATOR));
  86   1      }
  87          
  88          //-----------------------------------------------------------------------------
  89          // LPM_Disable_Wakeup ()
  90          //-----------------------------------------------------------------------------
  91          //
  92          // Return Value : None
  93          // Parameters   : None
  94          //
  95          // This function will disable wakeup sources
  96          //
  97          //-----------------------------------------------------------------------------
  98          void LPM_Disable_Wakeup (uint8_t wakeup)
  99          {
 100   1        PMU0CF_Local &= ~(wakeup & (RTC | PORT_MATCH | COMPARATOR));
 101   1      }
 102          
 103          //-----------------------------------------------------------------------------
 104          // LPM
 105          //-----------------------------------------------------------------------------
 106          //
 107          // Return Value : none
 108          // Parameters   : 1) uint8_t mode -- can be SLEEP or SUSPEND
 109          //
 110          // This function places the device in a low power mode
 111          //
 112          //-----------------------------------------------------------------------------
 113          void LPM(uint8_t mode)
C51 COMPILER V9.53.0.0   POWER                                                             01/14/2018 17:53:23 PAGE 3   

 114          {
 115   1         uint8_t b;
 116   1         uint8_t CLKSEL_save;
 117   1         uint8_t EA_save;
 118   1         uint8_t PMU0CF_snapshot;
 119   1         uint8_t RTC0CN0_snapshot;
 120   1         uint8_t IP_save;
 121   1         
 122   1         // Save current interrupt state and disable interrupts 
 123   1         EA_save = IE_EA;
 124   1         IE_EA = 0;
 125   1         IP_save = IP;
 126   1         
 127   1         // Save current system clock selection and select the low power oscillator
 128   1         // divided by 2 as the system clock
 129   1         CLKSEL_save = CLKSEL;
 130   1         CLKSEL = 0x14;
 131   1         
 132   1         // Enable the Flash read one-shot timer   
 133   1         FLSCL &= ~BYPASS;                   // Clear the one-shot bypass bit
 134   1         IP  =   NON_ZERO;                 // Write a "dummy" value to IP for a 3-byte
 135   1                                           // instruction
 136   1      
 137   1         // Verify that the system clock setting has been applied
 138   1         while(!(CLKSEL & 0x80));            // Wait until CLKRDY -> 1
 139   1         
 140   1         //----------------------------------
 141   1         // ~~~ Device in Low Power Mode ~~~
 142   1         //
 143   1             PMU0CF = (mode | PMU0CF_Local);
 144   1         //
 145   1         // ~~~   Device is now Awake    ~~~
 146   1         //----------------------------------
 147   1         
 148   1         // Restore the System Clock
 149   1         CLKSEL = CLKSEL_save;
 150   1         
 151   1         // Disable (Bypass) the Flash Read one-shot timer if the system clock
 152   1         // frequency is higher than 10 MHz
 153   1         if(SYSCLK > 10000000)
 154   1         {
 155   2            FLSCL |= BYPASS;                 // Set the one-shot bypass bit                     
 156   2         }
 157   1        
 158   1         // Capture the wake-up source and clear all wake-up source flags   
 159   1         PMU0CF_snapshot = PMU0CF;
 160   1         PMU0CF = CLEAR;
 161   1      
 162   1         // Capture RTC events that occured while PMU0CF was being cleared
 163   1         RTC0CN0_snapshot = RTC_Read(RTC0CN0); 
 164   1      
 165   1         // If an RTC Alarm occured while PMU0CF was being cleared, clear 
 166   1         // the PCU0CF flag again   
 167   1         if(RTC0CN0_snapshot & (ALRM) && ((PMU0CF_snapshot & RTCAWK) == 0))
 168   1         {
 169   2            PMU0CF_snapshot |= PMU0CF;
 170   2            PMU0CF = CLEAR;
 171   2         }
 172   1      
 173   1         //----------------------------------
 174   1         // Decode Wake-Up Sources
 175   1         //----------------------------------
 176   1      
C51 COMPILER V9.53.0.0   POWER                                                             01/14/2018 17:53:23 PAGE 4   

 177   1         // Check for an RTC Alarm
 178   1         if((PMU0CF_snapshot & RTCAWK) || (RTC0CN0_snapshot & ALRM))
 179   1         {
 180   2            RTC_Alarm = 1;
 181   2         }
 182   1         // Check for an RTC Clock Failure
 183   1         if((PMU0CF_snapshot & RTCFWK) || (RTC0CN0_snapshot & OSCFAIL))
 184   1         {
 185   2            RTC_Failure = 1;  
 186   2         }
 187   1         // Check for a Port Match Wakeup
 188   1         if(PMU0CF_snapshot & PMATWK)
 189   1         {
 190   2            Port_Match_Wakeup = 1;  
 191   2         }
 192   1         // Check for a Comparator Wakeup
 193   1         if(PMU0CF_snapshot & CMP0WK)
 194   1         {
 195   2            Comparator_Wakeup = 1;  
 196   2         }
 197   1         
 198   1         // Restore Interrupt Priorities
 199   1         IP = IP_save;
 200   1      
 201   1         // Restore Interrupt State
 202   1         IE_EA = EA_save;
 203   1         
 204   1         // Check for a reset pin Wakeup
 205   1         if(PMU0CF_snapshot & RSTWK)
 206   1         {
 207   2            // Delay 15uS per datasheet recommendation
 208   2            for(b = 255; b > 0; b--);
 209   2         }
 210   1          
 211   1      }               


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    154    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
