C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SMB_0
OBJECT MODULE PLACED IN .\lib/efm8sb1/peripheralDrivers/src/smb_0.OBJ
COMPILER INVOKED BY: Z:\home\alex\tools\SimplicityStudio_v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/alex/S
                    -implicityStudio/v4_workspace/EFM8SB10F8G-A-QFN20/lib/efm8sb1/peripheralDrivers/src/smb_0.c OMF2 SMALL DEBUG OBJECTEXTEND
                    - ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/al
                    -ex/SimplicityStudio/v4_workspace/EFM8SB10F8G-A-QFN20/inc;/home/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9
                    -//Device/shared/si8051Base;/home/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9//Device/shared/si8051base;/ho
                    -me/alex/tools/SimplicityStudio_v4/developer/sdks/8051/v4.0.9//Device/EFM8SB1/inc;/home/alex/tools/SimplicityStudio_v4/de
                    -veloper/sdks/8051/v4.0.9//Device/EFM8SB1/peripheral_driver/inc) PRINT(.\lib/efm8sb1/peripheralDrivers/src/smb_0.lst) CON
                    -D PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\lib/efm8sb1/peripheralDrivers/src/smb_0.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "smb_0.h"
   8          #include "assert.h"
   9          
  10          #if EFM8PDL_SMB0_AUTO_PAGE == 1
  11          // declare variable needed for autopage enter/exit
  12          #define DECL_PAGE uint8_t savedPage
  13          // enter autopage section
  14          #define SET_PAGE(p)     do                                                    \
  15                                  {                                                     \
  16                                    savedPage = SFRPAGE;  /* save current SFR page */   \
  17                                    SFRPAGE = (p);        /* set SFR page */            \
  18                                  } while(0)
  19          // exit autopage section
  20          #define RESTORE_PAGE    do                                                    \
  21                                  {                                                     \
  22                                    SFRPAGE = savedPage;  /* restore saved SFR page */  \
  23                                  } while(0)
  24          #else
              #define DECL_PAGE
              #define SET_PAGE
              #define RESTORE_PAGE
              #endif
  29          
  30          #define ALL_FLAGS  SMB0_TXMODE_SF \
  31                             | SMB0_START_SF \
  32                             | SMB0_STOP_SF \
  33                             | SMB0_ACKREQ_SF \
  34                             | SMB0_ARBLOST_SF \
  35                             | SMB0_ACK_SF
  36          
  37          bool SMB0_getIntFlag()
  38          {
  39   1        bool val;
  40   1        DECL_PAGE;
  41   1        SET_PAGE(0x00);
  42   1        val = SMB0CN0_SI;
  43   1        RESTORE_PAGE;
  44   1        return val;
  45   1      }
  46          
  47          void SMB0_clearIntFlag()
  48          {
  49   1        DECL_PAGE;
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 2   

  50   1        SET_PAGE(0x00);
  51   1        SMB0CN0_SI = 0;
  52   1        RESTORE_PAGE;
  53   1      }
  54          
  55          SI_REENTRANT_FUNCTION(SMB0_getStatusFlag, uint8_t, (uint8_t flag))
  56          {
  57   1        uint8_t val;
  58   1        DECL_PAGE;
  59   1        SET_PAGE(0x00);
  60   1        val = SMB0CN0 & flag;
  61   1        RESTORE_PAGE;
  62   1        return val;
  63   1      }
  64          
  65          SI_REENTRANT_FUNCTION(SMB0_setStatusFlag, void, (uint8_t flag, uint8_t state))
  66          {
  67   1        DECL_PAGE;
  68   1        SET_PAGE(0x00);
  69   1        if (state)
  70   1        {
  71   2          SMB0CN0 |= flag;
  72   2        }
  73   1        else
  74   1        {
  75   2          SMB0CN0 &= ~flag;
  76   2        }
  77   1        RESTORE_PAGE;
  78   1      }
  79          
  80          uint8_t SMB0_read()
  81          {
  82   1        uint8_t val;
  83   1        DECL_PAGE;
  84   1        SET_PAGE(0x00);
  85   1        val = SMB0DAT;
  86   1        RESTORE_PAGE;
  87   1        return val;
  88   1      }
  89          
  90          void SMB0_write(uint8_t value)
  91          {
  92   1        DECL_PAGE;
  93   1        SET_PAGE(0x00);
  94   1        SMB0DAT = value;
  95   1        RESTORE_PAGE;
  96   1      }
  97          
  98          void SMB0_abort()
  99          {
 100   1        DECL_PAGE;
 101   1        SET_PAGE(0x00);
 102   1        SMB0CF &= ~SMB0CF_ENSMB__BMASK;
 103   1        SMB0CF |= SMB0CF_ENSMB__BMASK;
 104   1        SMB0CN0 &= ~(SMB0CN0_STA__BMASK
 105   1            | SMB0CN0_STO__BMASK
 106   1            | SMB0CN0_ACKRQ__BMASK);
 107   1        RESTORE_PAGE;
 108   1      }
 109          
 110          void SMB0_ack(bool ack)
 111          {
 112   1        DECL_PAGE;
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 3   

 113   1        SET_PAGE(0x00);
 114   1        SMB0CN0_ACK = ack;
 115   1        RESTORE_PAGE;
 116   1      }
 117          
 118          void SMB0_start()
 119          {
 120   1        DECL_PAGE;
 121   1        SET_PAGE(0x00);
 122   1        SMB0CN0_STA = 1;
 123   1        RESTORE_PAGE;
 124   1      }
 125          
 126          void SMB0_stop()
 127          {
 128   1        DECL_PAGE;
 129   1        SET_PAGE(0x00);
 130   1        SMB0CN0_STO = 1;
 131   1        RESTORE_PAGE;
 132   1      }
 133          
 134          void SMB0_init(SMB0_Timebase_t timebase, bool sclLow) {
 135   1        DECL_PAGE;
 136   1        SET_PAGE(0x00);
 137   1        SMB0CF &= ~(SMB0CF_SMBCS__FMASK | SMB0CF_SMBTOE__BMASK);
 138   1        SMB0CF |= timebase
 139   1                  | SMB0CF_ENSMB__ENABLED
 140   1                  | SMB0CF_INH__SLAVE_DISABLED
 141   1                  | SMB0CF_SMBFTE__FREE_TO_ENABLED
 142   1                  | (uint8_t) sclLow << SMB0CF_SMBTOE__SHIFT;
 143   1        SMB0ADM |= SMB0ADM_EHACK__ADR_ACK_AUTOMATIC;
 144   1        RESTORE_PAGE;
 145   1      }
 146          
 147          void SMB0_initSlaveAddress(uint8_t address, uint8_t mask) {
 148   1        DECL_PAGE;
 149   1        SET_PAGE(0x00);
 150   1        SMB0CF  &= ~SMB0CF_INH__BMASK;
 151   1        SMB0ADR = address;
 152   1        SMB0ADM = mask | SMB0ADM_EHACK__BMASK;
 153   1        RESTORE_PAGE;
 154   1      }
 155          
 156          
 157          void SMB0_reset() {
 158   1        DECL_PAGE;
 159   1        SET_PAGE(0x00);
 160   1        SMB0CF = 0x0;
 161   1        SMB0CN0 = 0x0;
 162   1        SMB0ADR = 0x0;
 163   1        SMB0ADM = 0x0;
 164   1        RESTORE_PAGE;
 165   1      }
 166          
 167          #if EFM8PDL_SMB0_USE_STATEMACHINE == 1
              SI_INTERRUPT_PROTO(SMB0_ISR, SMBUS0_IRQn);
              SI_INTERRUPT(SMB0_ISR, SMBUS0_IRQn)
              {
                DECL_PAGE;
                SET_PAGE(0x00);
              
                if(SMB0CN0_ARBLOST) {
                  SMB0_arbLostCb(SMB0CN0 & 0xF0);
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 4   

                }
              
                // Normal operation
                switch (SMB0CN0 & 0xF0)// Status vector
                {
                  // SMB0CN0_MASTER ---------------------------------------------------------------
              
                  // Master Transmitter/Receiver: START condition transmitted.
                  case SMB0_MASTER_START:
                    SMB0_startCb();
                    SMB0CN0_STA = 0;
                    break;
              
                  // Master Transmitter: Data byte transmitted
                  case SMB0_MASTER_TXDATA:
                    SMB0_TxDataCb(true, SMB0CN0_ACK);
                    break;
              
                  // Master Receiver: byte received
                  case SMB0_MASTER_RXDATA:
                    SMB0_RxDataCb(true);
                    break;
              
                  case SMB0_SLAVE_TXDATA:
                    SMB0_TxDataCb(false, SMB0CN0_ACK);
                    break;
              
                  case SMB0_SLAVE_ADDRESS:
                    if(SMB0CN0_ARBLOST)
                    {
                      SMB0_arbLostCb(SMB0CN0 & 0xF0);
                    }
                    else
                    {
                      SMB0_addressCb();
                    }
                    SMB0CN0_STA = 0;  // Clear SMB0CN0_STA bit
                    break;
              
                  // Slave Receiver: Data received
                  case SMB0_SLAVE_RXDATA:
                    SMB0_RxDataCb(false);
                    break;
              
                  // Slave Receiver: Stop received while either a Slave Receiver or Slave
                  // Transmitter
                  case SMB0_SLAVE_RX_STOP:
                  case SMB0_SLAVE_TX_STOP:
                    SMB0_stopCb();
                    SMB0CN0_STO = 0;
                    break;
              
                  default:
                    break;
              
                } // end switch
              
                //Need an SMBus Restart?
                SMB0CN0_SI = 0;// Clear interrupt flag
                RESTORE_PAGE;
              }
              #endif //EFM8PDL_SMB0_USE_STATEMACHINE
 238          
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 5   

 239          #if EFM8PDL_SMB0_USE_BUFFER == 1
 240          
 241          SI_SEGMENT_VARIABLE(mAddress, uint8_t, SI_SEG_XDATA);
 242          SI_SEGMENT_VARIABLE(mTxCount, uint8_t, SI_SEG_XDATA);
 243          SI_SEGMENT_VARIABLE(mRxCount, uint8_t, SI_SEG_XDATA);
 244          SI_SEGMENT_VARIABLE_SEGMENT_POINTER(mTxBuffer, uint8_t, EFM8PDL_SMB0_RX_BUFTYPE,
 245              SI_SEG_XDATA);
 246          SI_SEGMENT_VARIABLE_SEGMENT_POINTER(mRxBuffer, uint8_t, EFM8PDL_SMB0_TX_BUFTYPE,
 247              SI_SEG_XDATA);
 248          
 249          SI_SEGMENT_VARIABLE(sRxSize, uint8_t, SI_SEG_XDATA);
 250          SI_SEGMENT_VARIABLE(sRxCount, uint8_t, SI_SEG_XDATA);
 251          SI_SEGMENT_VARIABLE(sTxCount, uint8_t, SI_SEG_XDATA);
 252          SI_SEGMENT_VARIABLE_SEGMENT_POINTER(sRxBuffer, uint8_t, EFM8PDL_SMB0_RX_BUFTYPE,
 253              SI_SEG_XDATA);
 254          SI_SEGMENT_VARIABLE_SEGMENT_POINTER(sTxBuffer, uint8_t, EFM8PDL_SMB0_TX_BUFTYPE,
 255              SI_SEG_XDATA);
 256          
 257          SI_SEGMENT_VARIABLE(smbBusy, bool, SI_SEG_IDATA);
*** WARNING C185 IN LINE 257 OF /home/alex/SimplicityStudio/v4_workspace/EFM8SB10F8G-A-QFN20/lib/efm8sb1/peripheralDrive
             -rs/src/smb_0.c: 'smbBusy': different memory space
 258          SI_SEGMENT_VARIABLE(smbReq, bool, SI_SEG_IDATA);
*** WARNING C185 IN LINE 258 OF /home/alex/SimplicityStudio/v4_workspace/EFM8SB10F8G-A-QFN20/lib/efm8sb1/peripheralDrive
             -rs/src/smb_0.c: 'smbReq': different memory space
 259          SI_SEGMENT_VARIABLE(smbReceive, bool, SI_SEG_IDATA);
*** WARNING C185 IN LINE 259 OF /home/alex/SimplicityStudio/v4_workspace/EFM8SB10F8G-A-QFN20/lib/efm8sb1/peripheralDrive
             -rs/src/smb_0.c: 'smbReceive': different memory space
 260          SI_SEGMENT_VARIABLE(mRetries, uint8_t, SI_SEG_XDATA);
 261          
 262          void SMB0_transfer(uint8_t address,
 263              SI_VARIABLE_SEGMENT_POINTER(txBuffer, uint8_t, EFM8PDL_SMB0_TX_BUFTYPE),
 264              SI_VARIABLE_SEGMENT_POINTER(rxBuffer, uint8_t, EFM8PDL_SMB0_RX_BUFTYPE),
 265              uint8_t tx_len, uint8_t rx_len) {
 266   1      
 267   1        DECL_PAGE;
 268   1        SET_PAGE(0x00);
 269   1        //Setup transfer
 270   1        mAddress = address;
 271   1        mTxBuffer = txBuffer;
 272   1        mRxBuffer = rxBuffer;
 273   1        mTxCount = tx_len;
 274   1        mRxCount = rx_len;
 275   1        mRetries = EFM8PDL_SMB0_MASTER_RETRIES;
 276   1      
 277   1        if (smbBusy) {
 278   2          smbReq = true;
 279   2        } else {
 280   2          //Start transfer
 281   2          SMB0CN0_STA = 1;
 282   2        }
 283   1        RESTORE_PAGE;
 284   1      }
 285          
 286          void SMB0_abortTransfer(){
 287   1        mTxCount = 0;
 288   1        mRxCount = 0;
 289   1        sTxCount = 0;
 290   1      
 291   1        smbBusy = false;
 292   1        smbReq = false;
 293   1      }
 294          
 295          uint8_t SMB0_txBytesRemaining() {
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 6   

 296   1        return mTxCount;
 297   1      }
 298          
 299          uint8_t SMB0_rxBytesRemaining() {
 300   1        return mRxCount;
 301   1      }
 302          
 303          void SMB0_initSlave(uint8_t address,
 304                              SI_VARIABLE_SEGMENT_POINTER(commandBuffer, uint8_t, EFM8PDL_SMB0_RX_BUFTYPE), uint8_t 
             -length) {
 305   1        DECL_PAGE;
 306   1        SET_PAGE(0x00);
 307   1        SMB0CF  &= ~SMB0CF_INH__BMASK;
 308   1        SMB0ADR = address;
 309   1        SMB0ADM = 0xFF | SMB0ADM_EHACK__BMASK;
 310   1        sRxBuffer = commandBuffer;
 311   1        sRxSize = length;
 312   1        sRxCount = 0;
 313   1        RESTORE_PAGE;
 314   1      }
 315          
 316          uint8_t SMB0_getCommandLength() {
 317   1        return sRxCount;
 318   1      }
 319          
 320          void SMB0_sendResponse(
 321              SI_VARIABLE_SEGMENT_POINTER(dataBuffer, uint8_t, EFM8PDL_SMB0_TX_BUFTYPE),
 322              uint8_t length) {
 323   1        sTxBuffer = dataBuffer;
 324   1        sTxCount = length;
 325   1      }
 326          
 327          SI_INTERRUPT_PROTO(SMB0_ISR, SMBUS0_IRQn);
 328          
 329          SI_INTERRUPT(SMB0_ISR, SMBUS0_IRQn)
 330          {
 331   1        DECL_PAGE;
 332   1        SET_PAGE(0x00);
 333   1      
 334   1        // Jump to status vector handler
 335   1        switch (SMB0CN0 & 0xF0)
 336   1        {
 337   2        // Master Transmitter/Receiver: START condition transmitted.
 338   2        case SMB0_MASTER_START:
 339   2          //Send address. If no tx data then initiate read.
 340   2          SMB0DAT = mAddress;
 341   2          if (!mTxCount)
 342   2          {
 343   3            SMB0DAT |= 0x01;
 344   3          }
 345   2          smbReceive = SMB0DAT & 0x01;
 346   2      
 347   2          //tailchain: clear_start;
 348   2          SMB0CN0_STA = 0;
 349   2          smbBusy = true;
 350   2          break;
 351   2      
 352   2        // Master Transmitter: Data byte transmitted
 353   2        case SMB0_MASTER_TXDATA:
 354   2          if (SMB0CN0_ACK)
 355   2          {
 356   3            if (smbReceive)
 357   3            {
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 7   

 358   4              //Handle read transfer
 359   4              if(!--mRxCount)
 360   4              {
 361   5                SMB0CN0_ACK = 0; //ack for first data received byte
 362   5              }
 363   4              //ACK = 1 by default so no need to set it
 364   4            }
 365   3            else
 366   3            {
 367   4              //Handle writes
 368   4              if (mTxCount)
 369   4              {
 370   5                //if data remains in tx buffer send next byte
 371   5                SMB0DAT = *mTxBuffer++;
 372   5                mTxCount--;
 373   5              }
 374   4              else
 375   4              {
 376   5                //Handle writes finished
 377   5                if (mRxCount)
 378   5                {
 379   6                  //if tx done and rx remaining do repeated start
 380   6                  SMB0CN0_STA = 1;
 381   6                }
 382   5                else
 383   5                {
 384   6                  //if tx done and no rx then stop
 385   6                  //tailchain: stop_seq
 386   6                  SMB0_transferCompleteCb();
 387   6                  SMB0CN0_STO = 1;
 388   6                  SMB0CN0_STA = smbReq;
 389   6                  smbReq = false;
 390   6                  smbBusy = false;
 391   6                } // if rxCount else
 392   5              }   //if txCount else
 393   4            }     //if ! rxReceive (rxReceive = ack of address so ignore)
 394   3          }       // if ACK
 395   2          else
 396   2          {
 397   3            //Error on NAC
 398   3            SMB0_errorCb(SMB0_NACK_ERROR);
 399   3      
 400   3            //tailchain: stop_seq
 401   3            SMB0CN0_STO = 1;
 402   3            SMB0CN0_STA = smbReq; //necessary for tailchain
 403   3            smbReq = false; //necessary for tailchain
 404   3            smbBusy = false;
 405   3          }
 406   2          break;
 407   2      
 408   2        // Master Receiver: byte received
 409   2        case SMB0_MASTER_RXDATA:
 410   2          //Read in data we just received
 411   2          *mRxBuffer++ = SMB0DAT;
 412   2      
 413   2          //if bytes remain read this one and setup for next one
 414   2          if (mRxCount)
 415   2          {
 416   3            //NACK if the byte we are about to read is our last
 417   3            if (!--mRxCount)
 418   3            {
 419   4              SMB0CN0_ACK = 0;
 420   4            }
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 8   

 421   3            //ACK =1  by default so no need to set it.
 422   3          }
 423   2          else
 424   2          {
 425   3            SMB0CN0_ACK = 0;
 426   3      
 427   3            // If no bytes remain notify user xfer complete and issue stop.
 428   3            //tailchain: stop_seq
 429   3            SMB0_transferCompleteCb();
 430   3            SMB0CN0_STO = 1;
 431   3            SMB0CN0_STA = smbReq;
 432   3            smbReq = false;
 433   3            smbBusy = false;
 434   3          }
 435   2          break;
 436   2      
 437   2        // Slave Transmitter: Data byte transmitted
 438   2        case SMB0_SLAVE_TXDATA:
 439   2          if(SMB0CN0_ACK)
 440   2          {
 441   3            if(--sTxCount)
 442   3            {
 443   4              SMB0DAT = *sTxBuffer++;
 444   4            }
 445   3            else
 446   3            {
 447   4              SMB0_errorCb(SMB0_TXUNDER_ERROR);
 448   4            }
 449   3          }
 450   2          break;
 451   2      
 452   2        // Slave Receiver: Start+Address received
 453   2        case SMB0_SLAVE_ADDRESS:
 454   2          if(SMB0CN0_ARBLOST)
 455   2          {
 456   3            if(mRetries--)
 457   3            {
 458   4              smbReq = true;
 459   4            }
 460   3            else
 461   3            {
 462   4              SMB0_errorCb(SMB0_ARBLOST_ERROR);
 463   4            }
 464   3          }
 465   2      
 466   2          smbReceive = !(SMB0DAT & 0x01);
 467   2          // Nack defaults to 1 so no need to set it
 468   2      
 469   2          //Clear receive count if we are about to receive OR
 470   2          // if we have no rx phase (we are a write only xfer)
 471   2          // We leave rxCount alone if this is a repeated start
 472   2          if(smbReceive || !smbBusy)
 473   2          {
 474   3            sRxCount = 0;
 475   3          }
 476   2      
 477   2          // If this is a read then fire command received
 478   2          // either a read or a repeated start has been requested
 479   2          if (!smbReceive) {
 480   3            if(sRxCount || !smbBusy){
 481   4              //Issue a command received callback if there is RX data or if this
 482   4              // is not a repeated start
 483   4              SMB0_commandReceivedCb();
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 9   

 484   4          }
 485   3      
 486   3            SMB0DAT = *sTxBuffer++;
 487   3            //DO NOT decrement sTxSize This is handled AFTER the first byte is transmitted
 488   3          }
 489   2      
 490   2          //tailchain: clear_start
 491   2          SMB0CN0_STA = 0;
 492   2          smbBusy = true;
 493   2          break;
 494   2      
 495   2        // Slave Receiver: Data received
 496   2        case SMB0_SLAVE_RXDATA:
 497   2          //Read data into buffer
 498   2          sRxBuffer[sRxCount++] = SMB0DAT;
 499   2      
 500   2          //If buffer is about to overflow callback user and reset buffer
 501   2          if (sRxCount == sRxSize)
 502   2          {
 503   3            SMB0_commandReceivedCb();
 504   3            sRxCount = 0;
 505   3          }
 506   2      
 507   2          //ACK = 1 by default so no need to set it
 508   2          break;
 509   2      
 510   2        // Slave Receiver: Stop received while either a Slave Receiver or Transmitter
 511   2        case SMB0_SLAVE_RX_STOP:
 512   2        case SMB0_SLAVE_TX_STOP:
 513   2          if (smbReceive && sRxCount)
 514   2          {
 515   3            SMB0_commandReceivedCb();
 516   3          }
 517   2      
 518   2          //clear stop
 519   2          SMB0CN0_STO = 0;
 520   2      
 521   2          //If master request pending send a start.
 522   2          //tailchain: stop_seq
 523   2          SMB0CN0_STA = smbReq;
 524   2          smbReq = false;
 525   2          smbBusy = false;
 526   2          break;
 527   2      
 528   2        default:
 529   2          // All other cases are an error
 530   2          SMB0_errorCb(SMB0_UNKNOWN_ERROR);
 531   2          // ----------------------------------------------------------------------
 532   2        } // end switch
 533   1      
 534   1        //Clear interrupt flag
 535   1        SMB0CN0_SI = 0;
 536   1      
 537   1        RESTORE_PAGE;
 538   1      }
 539          
 540          #endif //EFM8PDL_SMB0_USE_BUFFER


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    808    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11    ----
C51 COMPILER V9.53.0.0   SMB_0                                                             01/14/2018 17:53:25 PAGE 10  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
